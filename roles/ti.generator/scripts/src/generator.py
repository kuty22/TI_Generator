import sys
import os
import argparse
from string import Template
import pandas as pd
from src.extract import Extract_content


# Template variables:
#   - target_file
#   - asser_options
#   - file_name
#   - iterator
#   - user
#   - group
#   - mode
TI_TEMPLATE_FUNCTION = Template("""
# target: $target_file
# assert on: $asser_options
def $func_name(host):
    file_target = host.file('$target_file')
    assert file_target.user == '$user'
    assert file_target.group == '$group'
    assert file_target.mode == 0o$mode

""")

TI_TEMPLATE_HEADER = Template("""
#######################################
# TestInfra generated by Ti-generator #
#######################################
# This tool is an open-source project on Github (https://github.com/kuty22/TI_Generator)

""")

class IT_generator_file:

    def __init__(self, configurations, directory, file, export):
        self.__configurations = configurations
        self.__directory = directory
        self.__file = file
        self.__export = list(export)

        tmp_path = self.__directory + self.__file
        self.__path_file = tmp_path.replace("//", "/")

        self.__create_directory()
        self.__create_file()
        self.__templated_files = ""


    def __create_directory(self):
        if os.path.isdir(self.__directory) is False:
            os.makedirs(self.__directory)

    def __create_file(self):
        if os.path.isfile(self.__path_file) is False:
            open(self.__path_file, 'a').close()

    def __check_function_name_validity(self):
        file_name_for_function = self.__file.split(".")[0].replace("-","_")
        function_name = ""
        for i in range(0, 10000):
            function_name = file_name_for_function + str(i)
            if function_name not in self.__templated_files:
                break
        return function_name

    def generate(self):

        file_object = open(self.__path_file, 'r')
        self.__templated_files += file_object.read()

        with open(self.__path_file,'w+') as script_template:

            # write header
            header_script = TI_TEMPLATE_HEADER.safe_substitute() if len(self.__templated_files) is 0 else ""
            script_template.write(header_script)

            tmp_csv  = []

            for configuration in self.__configurations:
                function_name = self.__check_function_name_validity()
                self.__templated_files += TI_TEMPLATE_FUNCTION.substitute(
                    target_file     = configuration["path"],
                    asser_options   = "['file_exist', 'user', 'group', mode]",
                    func_name       = function_name,
                    user            = configuration["owner"],
                    group           = configuration["group"],
                    mode            = configuration["permissions"]["full"]
                )
                tmp_csv.append(dict({
                    'target_file'     : configuration["path"],
                    'func_name'       : function_name,
                    'user'            : configuration["owner"],
                    'group'           : configuration["group"],
                    'mode'            : configuration["permissions"]["full"]
                }))
            print(self.__export)
            if "csv=True" in self.__export:
                pd.DataFrame(tmp_csv).to_csv(self.__path_file.replace(".py", ".csv"))
            if "xls=True" in self.__export:
                pd.DataFrame(tmp_csv).to_excel(self.__path_file.replace(".py", ".xls"))
            script_template.write(self.__templated_files)
