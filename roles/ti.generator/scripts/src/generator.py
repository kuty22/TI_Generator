import sys
import os
import argparse
from string import Template
import pandas as pd

# Template variables:
#   - target_file
#   - asser_options
#   - file_name
#   - iterator
#   - user
#   - group
#   - mode
TI_TEMPLATE_FUNCTION = Template("""
# target: $target_file
# assert on: $asser_options
def $func_name(host):
    file_target = host.file('$target_file')
    assert file_target.user == '$user'
    assert file_target.group == '$group'
    assert file_target.mode == 0o$mode

""")

TI_TEMPLATE_PORT_FUNCTION = Template("""
# assert on: $asser_options
def $func_name(host):
    assert host.socket("tcp://$port_address").is_listening

""")

TI_TEMPLATE_HEADER = Template("""
#######################################
# TestInfra generated by Ti-generator #
#######################################
# This tool is an open-source project on Github (https://github.com/kuty22/TI_Generator)

""")

class IT_generator:

    def __init__(self, content, configuration):
        self._templated_files = ""

        self._content = content
        self._directory = configuration.directory
        self._file = configuration.file
        self._export = list(configuration.export)

        if self._directory[-1] != '/':
            self._directory = "{}/".format(self._directory)

        tmp_path = self._directory + self._file
        self._path_file = tmp_path.replace("//", "/")

        self._create_directory()
        self._create_file()

    def _create_directory(self):
        if os.path.isdir(self._directory) is False:
            os.makedirs(self._directory)

    def _create_file(self):
        if os.path.isfile(self._path_file) is False:
            open(self._path_file, 'a').close()

    def _check_function_name_validity(self, prefix="",sufix=""):
        file_name_for_function = self._file.split(".")[0].replace("-","_")
        function_name = ""
        for i in range(0, 10000):
            function_name = prefix + file_name_for_function + str(i) + sufix
            if function_name not in self._templated_files:
                break
        return function_name

    def _generate_export(self, data):
        if "csv=True" in self._export or "csv=true" in self._export:
            pd.DataFrame(data).to_csv(self._path_file.replace(".py", ".csv"))
        if "xls=True" in self._export or "xls=true" in self._export:
            pd.DataFrame(data).to_excel(self._path_file.replace(".py", ".xls"))


class IT_generator_content(IT_generator):

    def generate(self):

        file_object = open(self._path_file, 'r')
        self._templated_files += file_object.read()

        with open(self._path_file,'w+') as script_template:

            # write header
            header_script = TI_TEMPLATE_HEADER.safe_substitute() if len(self._templated_files) is 0 else ""
            script_template.write(header_script)

            tmp_csv  = []

            for configuration in self._content:
                function_name = self._check_function_name_validity()
                self._templated_files += TI_TEMPLATE_FUNCTION.substitute(
                    target_file     = configuration["path"],
                    asser_options   = "['file_exist', 'user', 'group', mode]",
                    func_name       = function_name,
                    user            = configuration["owner"],
                    group           = configuration["group"],
                    mode            = configuration["permissions"]["full"]
                )
                tmp_csv.append(dict({
                    'target_file'     : configuration["path"],
                    'func_name'       : function_name,
                    'user'            : configuration["owner"],
                    'group'           : configuration["group"],
                    'mode'            : configuration["permissions"]["full"]
                }))

            self._generate_export(tmp_csv)
            script_template.write(self._templated_files)

class IT_generator_port(IT_generator):

    def generate(self):
        self._path_file = self._path_file.replace(".py", "-port.py")
        self._create_file()
        file_object = open(self._path_file, 'r')
        self._templated_files += file_object.read()

        with open(self._path_file,'w+') as script_template:
            # write header
            header_script = TI_TEMPLATE_HEADER.safe_substitute() if len(self._templated_files) is 0 else ""
            script_template.write(header_script)

            tmp_tab  = []

            for configuration in self._content:
                function_name = self._check_function_name_validity(sufix="_port")
                self._templated_files += TI_TEMPLATE_PORT_FUNCTION.substitute(
                    asser_options   = "['file_exist', 'user', 'group', mode]",
                    func_name       = function_name,
                    port_address    = configuration["address_port"]
                )
                tmp_tab.append(dict({
                    'func_name'       : function_name,
                    'user'            : configuration["users"],
                    'address_port'    : configuration["address_port"]
                }))

            self._generate_export(tmp_tab)
            script_template.write(self._templated_files)
