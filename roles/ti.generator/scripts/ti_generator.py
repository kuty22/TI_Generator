import sys
import os
import argparse
from string import Template

# Template variables:
#   - target_file
#   - asser_options
#   - file_name
#   - iterator
#   - user
#   - group
#   - mode
TI_TEMPLATE_FUNCTION = Template("""
# target: $target_file
# assert on: $asser_options
def $func_name(host):
    file_target = host.file('$target_file')
    assert file_target.user == '$user'
    assert file_target.group == '$group'
    assert file_target.mode == $mode

""")

TI_TEMPLATE_HEADER = Template("""
#######################################
# TestInfra generated by Ti-generator #
#######################################
# This tool is an open-source project on Github (https://github.com/kuty22/TI_Generator)

""")

class Extract_content:

    def __init__(self, contents):
        self.__content = contents.split("\n")
        self.__process_content()

    def get_content(self):
        return self.__it_data

    def __process_content(self):
        self.__it_data = []
        for item in self.__content:
            tmp_dict = dict({})
            tmp_dict.update(self.__get_file_name(item))
            tmp_dict.update(self.__get_permission(item))
            tmp_dict.update(self.__get_owner_group(item))
            self.__it_data.append(tmp_dict)

    def __get_file_name(self, string):
        file_path = string.split(" ")[-1]
        return dict({'path': file_path})

    def __get_owner_group(self, string):
        owner, group = string.split(" ")[2:4]
        return dict({'owner': owner, 'group': group })

    def __permissions_to_number(self, perm):
        count = 0
        for l in perm:
            if 'r' in l:
                count += 4
            elif 'w' in l:
                count += 2
            elif 'x' in l:
                count += 1
        return count

    def __get_permission(self, data):
        print("item: {}".format(data))
        type = data[0]
        user = self.__permissions_to_number(data[1:4])
        group = self.__permissions_to_number(data[4:7])
        other = self.__permissions_to_number(data[7:10])
        full = "{}{}{}".format(user, group, other)

        permission_extract = dict({ 'permissions': {'full': full, 'user': user, 'group': group, 'other': other, 'type': type}})
        return permission_extract

class IT_generator_file:

    def __init__(self, configurations, directory, file):
        self.__configurations = configurations
        self.__directory = directory
        self.__file = file

        tmp_path = self.__directory + self.__file
        self.__path_file = tmp_path.replace("//", "/")

        self.__create_directory()
        self.__create_file()
        self.__templated_files = ""


    def __create_directory(self):
        if os.path.isdir(self.__directory) is False:
            os.makedirs(self.__directory)

    def __create_file(self):
        if os.path.isfile(self.__path_file) is False:
            open(self.__path_file, 'a').close()

    def __check_function_name_validity(self):
        file_name_for_function = self.__file.split(".")[0].replace("-","_")
        function_name = ""
        for i in range(0, 10000):
            function_name = file_name_for_function + str(i)
            if function_name not in self.__templated_files:
                break
        print(function_name)
        return function_name

    def generate(self):

        file_object = open(self.__path_file, 'r')
        self.__templated_files += file_object.read()

        with open(self.__path_file,'w+') as script_template:

            # write header
            header_script = TI_TEMPLATE_HEADER.safe_substitute() if len(self.__templated_files) is 0 else ""
            script_template.write(header_script)
            for configuration in self.__configurations:
                function_name = self.__check_function_name_validity()
                self.__templated_files += TI_TEMPLATE_FUNCTION.substitute(
                    target_file     = configuration["path"],
                    asser_options   = "['file_exist', 'user', 'group', mode]",
                    func_name       = function_name,
                    user            = configuration["owner"],
                    group           = configuration["group"],
                    mode            = configuration["permissions"]["full"]
                )

            script_template.write(self.__templated_files)

def main(configuration):

    clean_content = Extract_content(configuration["content"])
    IT_generator_file(clean_content.get_content(), configuration["directory"], configuration["file"]).generate()

def parsarg():
    parser = argparse.ArgumentParser(description="ti_generator: Generator testinfra file for permissions tests.")

    parser.add_argument("-f", "--file", help="File test name created for the content (-c)", type=str)
    parser.add_argument("-d", "--directory", help="Directory for write tests files.)", type=str)
    parser.add_argument("-c", "--content", help="Content for created test ('ls -adl' display).)", type=str)
    args = parser.parse_args()

    if args.file is not None and args.directory is not None and args.content is not None:
        return dict({"file": args.file, "directory": args.directory, "content" : args.content})
    elif args.file is None and args.directory is None and args.content is None:
        print("Pass: empty parameters. (ti_generator.py)", file=sys.stderr)
        sys.exit(0)

    print("Error: argument missing.(ti_generator.py)", file=sys.stderr)
    sys.exit(-1)

if __name__ == '__main__':
    configuration = parsarg()
    main(configuration)
